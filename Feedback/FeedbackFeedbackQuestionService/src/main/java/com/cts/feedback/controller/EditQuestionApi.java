/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cts.feedback.controller;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cts.feedback.entity.Answer;
import com.cts.feedback.entity.Question;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.cts.feedback.entity.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-02T10:12:15.340+05:30[Asia/Calcutta]")
@Api(value = "Edit-question", description = "Edit-question API")
@CrossOrigin("http://localhost:3000")
public interface EditQuestionApi {

	Logger log = LoggerFactory.getLogger(EditQuestionApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "Get  Question ", nickname = "getQuestions()", notes = "Get the Question and Answers for the Events", response = Question.class, tags = {
			"Question and Answers", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Question.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/questions/{questionId}", produces = { "application/json" }, method = RequestMethod.GET)
	default Mono<ResponseEntity<Question>> getQuestion(
			@ApiParam(value = "", required = true) @PathVariable("questionId") Integer questionId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Mono.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n}, {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n} ]",
							Question.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Mono.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EditQuestionApi interface so no example is generated");
		}
		return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "Get  Question ", nickname = "getQuestions()", notes = "Get the Question and Answers for the Events", response = Question.class, tags = {
			"Question and Answers", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Question.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/questions", produces = { "application/json" }, method = RequestMethod.GET)
	default Flux<ResponseEntity<Question>> getAllQuestion() {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n}, {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n} ]",
							Question.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EditQuestionApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "Get  Answers ", nickname = "getAnswers()", notes = "Get  Answers for the Questions", response = Answer.class, tags = {
			"Question and Answers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Answer.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/answers/{qnId}", produces = { "application/json" }, method = RequestMethod.GET)
	default Flux<ResponseEntity<Answer>> getAnswers(
			@ApiParam(value = "", required = true) @PathVariable("qnId") Integer ansId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n}, {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n} ]",
							Answer.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EditQuestionApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "Get  Question and Answers List", nickname = "getFeedbackQuestions()", notes = "Get the Question and Answers for the Events", response = Question.class, responseContainer = "List", tags = {
			"Question and Answers", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Question.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/feedback-questions", produces = { "application/json" }, method = RequestMethod.GET)
	default Flux<ResponseEntity<FeedbackQuestions>> getFeedbackQuestions() {

		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n}, {\r\n  \"question\" : \"question\",\r\n  \"answers\" : {\r\n    \"questions_id\" : 0,\r\n    \"answers\" : \"answers\"\r\n  },\r\n  \"fb_type\" : \"fb_type\"\r\n} ]",
							FeedbackQuestions.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EditQuestionApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

	}

	@ApiOperation(value = "delete  Question and Answers", nickname = "removeQA", notes = "delete the Question and Answers for the Events", response = Question.class, responseContainer = "List", tags = {
			"Question and Answers", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Question.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/delete-questions/{questionId}", produces = {
			"application/json" }, method = RequestMethod.DELETE)
	default Mono<ResponseEntity<Void>> deleteQuestion(
			@ApiParam(value = "", required = true) @PathVariable("questionId") Integer questionId) { 
		return Mono.just(new ResponseEntity<Void>(HttpStatus.OK));
	}


	@ApiOperation(value = "delete  Question and Answers", nickname = "removeQA", notes = "delete the Question and Answers for the Events", response = Question.class, responseContainer = "List", tags = {
			"Question and Answers", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Question.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/delete-answers", produces = {
			"application/json" }, method = RequestMethod.DELETE)
	default Flux<ResponseEntity<Void>> deleteAllAnswers(
			@ApiParam(value = "", required = true) @Valid @RequestBody List<Answer> body) { 
		return Flux.just(new ResponseEntity<Void>(HttpStatus.OK));
	}
	
	@ApiOperation(value = "", nickname = "role", notes = "assign the user role", response = Void.class, tags = {
			"fms login", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "role assigned successfully", response = Void.class),
			@ApiResponse(code = 404, message = "No user found") })
	@RequestMapping(value = "/edit-questions/{questionId}", method = RequestMethod.PUT, consumes = { "application/json",
			"application/xml" })
	default Mono<ResponseEntity<Void>> updateQuestion(
			@ApiParam(value = "", required = true) @Valid @RequestBody Question body,
			@PathVariable("questionId") Integer questionId) {

		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
				} catch (Exception e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Mono.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default RoleApi interface so no example is generated");
		}
		return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "", nickname = "role", notes = "assign the user role", response = Void.class)
	@ApiResponses(value = { @ApiResponse(code = 200, message = "role assigned successfully", response = Void.class),
			@ApiResponse(code = 404, message = "No Answers found") })
	@RequestMapping(value = "/edit-answers", method = RequestMethod.PUT, consumes = { "application/json",
			"application/xml" })
	default Flux<ResponseEntity<Answer>> updateAnswers(
			@ApiParam(value = "", required = true) @Valid @RequestBody List<Answer> body) {
		return null;
	}
}
